package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"

	"github.com/gardener/gardener-extension-provider-vsphere/test/gcve-setup/common"
	"github.com/go-logr/logr"
	"sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
)

var (
	serviceAccount = flag.String("service-account", os.Getenv("SERVICEACCOUNT_JSON"), "Service account containing credentials for the GCP API")
	location       = flag.String("location", os.Getenv("LOCATION"), "GCP location such as us-east4a")
	cloudId        = flag.String("cloud-id", os.Getenv("CLOUD_ID"), "cloud ID")
)

func main() {
	var logger logr.Logger

	opts := zap.Options{}
	opts.BindFlags(flag.CommandLine)
	flag.Parse()

	log.SetLogger(zap.New(zap.UseFlagOptions(&opts)))
	logger = log.Log.WithName("gcve-setup")

	var svcAcctKey map[string]string
	err := json.Unmarshal([]byte(*serviceAccount), &svcAcctKey)
	if err != nil {
		logger.Error(err, "Could not unmarshal application credential JSON")
		os.Exit(1)
	}
	conf := common.GetClient(svcAcctKey)
	url := fmt.Sprintf("https://vmwareengine.googleapis.com/v1/projects/%s/locations/%s/operations/operation-1660749602858-5e6716623a446-0a77a685-56930a51", svcAcctKey["project_id"], *location)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		logger.Error(err, "Failure to wait request")
		os.Exit(1)
	}
	resp, err := conf.Do(req)

	bodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		logger.Error(err, "Could not read from response body")
		os.Exit(1)
	}
	logger.Info(string(bodyBytes))

}
