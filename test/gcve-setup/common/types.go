package common

import (
	_ "encoding/json"
	"fmt"
	"time"
)

type State string

const STATE_UNSPECIFIED State = "STATE_UNSPECIFIED"

const (
	ACTIVE   = "ACTIVE"
	CREATING = "CREATING"
	UPDATING = "UPDATING"
	FAILED   = "FAILED"
	DELETED  = "DELETED"
	PURGING  = "PURGING"
)

var Wait = fmt.Errorf("waiting")

type NetworkConfig struct {
	// Deprecated
	Network string `json:"network,omitempty"`
	// Deprecated
	ServiceNetwork      string `json:"serviceNetwork,omitempty"`
	ManagementCidr      string `json:"managementCidr"`
	VmwareEngineNetwork string `json:"vmwareEngineNetwork,omitempty"`
}

type ManagementCluster struct {
	ClusterId           string `json:"clusterId"`
	NodeTypeId          string `json:"nodeTypeId"`
	NodeCount           int    `json:"nodeCount"`
	NodeCustomCoreCount int    `json:"nodeCustomCoreCount,omitempty"`
}

type Hcx struct {
	InternalIp string `json:"internalIp,omitempty"`
	// Deprecated
	ExternalIp string `json:"externalIp,omitempty"`
	Version    string `json:"version,omitempty"`
	State      State  `json:"state,omitempty"`
	Fqdn       string `json:"fqdn,omitempty"`
}

type Nsx struct {
	InternalIp string `json:"internalIp,omitempty"`
	// Deprecated
	ExternalIp string `json:"externalIp,omitempty"`
	Version    string `json:"version,omitempty"`
	State      State  `json:"state,omitempty"`
	Fqdn       string `json:"fqdn,omitempty"`
}

type Vcenter struct {
	InternalIp string `json:"internalIp,omitempty"`
	// Deprecated
	ExternalIp string `json:"externalIp,omitempty"`
	Version    string `json:"version,omitempty"`
	State      State  `json:"state,omitempty"`
	Fqdn       string `json:"fqdn,omitempty"`
}

type PrivateCloud struct {
	Name              string            `json:"name,omitempty"`
	CreateTime        *time.Time        `json:"createTime,omitempty"`
	UpdateTime        *time.Time        `json:"updateTime,omitempty"`
	DeleteTime        *time.Time        `json:"deleteTime,omitempty"`
	ExpireTime        *time.Time        `json:"expireTime,omitempty"`
	State             State             `json:"state,omitempty"`
	NetworkConfig     NetworkConfig     `json:"networkConfig"`
	ManagementCluster ManagementCluster `json:"managementCluster"`
	Description       string            `json:"description,omitempty"`
	Hcx               *Hcx              `json:"hcx,omitempty"`
	Nsx               *Nsx              `json:"nsx,omitempty"`
	Vcenter           *Vcenter          `json:"vcenter,omitempty"`
	UID               string            `json:"uid,omitempty"`
}

type ListPrivateClouds struct {
	PrivateClouds []PrivateCloud `json:"privateClouds,omitempty"`
	NextPageToken string         `json:"nextPageToken,omitempty"`
	unreachable   []string       `json:"unreachable,omitempty"`
}

type HasError interface {
	GetError() *Error
}

type Operation struct {
	Name     string         `json:"name,omitempty"`
	Done     bool           `json:"done,omitempty"`
	Metadata map[string]any `json:"metadata,omitempty"`
	Response map[string]any `json:"response,omitempty"`
	Error    *Error         `json:"error,omitempty"`
}

type List[T any] struct {
	Items []T `json:"operations"`
}

func (e *Operation) GetError() *Error {
	return e.Error
}

type Error struct {
	Code    int              `json:"code"`
	Message string           `json:"message"`
	Status  string           `json:"status"`
	Details []map[string]any `json:"details"`
}

type Credentials struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type RunResults struct {
	PrivateCloud       PrivateCloud `yaml:"privateCloud"`
	NsxCredentials     Credentials  `yaml:"nsxCredentials"`
	VcenterCredentials Credentials  `yaml:"vcenterCredentials"`
}
