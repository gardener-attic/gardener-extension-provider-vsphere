package common

import (
	_ "encoding/json"
	"fmt"
)

type State string

const (
	STATE_UNSPECIFIED State = "STATE_UNSPECIFIED"
	ACTIVE                  = "ACTIVE"
	CREATING                = "CREATING"
	UPDATING                = "UPDATING"
	FAILED                  = "FAILED"
	DELETED                 = "DELETED"
	PURGING                 = "PURGING"
)

var Wait = fmt.Errorf("waiting")

type NetworkConfig struct {
	// Deprecated
	Network string `json:"network,omitempty"`
	// Deprecated
	ServiceNetwork      string `json:"serviceNetwork,omitempty"`
	ManagementCidr      string `json:"managementCidr"`
	VmwareEngineNetwork string `json:"vmwareEngineNetwork,omitempty"`
}

type ManagementCluster struct {
	ClusterId           string `json:"clusterId"`
	NodeTypeId          string `json:"nodeTypeId"`
	NodeCount           string `json:"nodeCount"`
	NodeCustomCoreCount string `json:"nodeCustomCoreCount,omitempty"`
}

type Hcx struct {
	InternalIp string `json:"internalIp"`
	// Deprecated
	ExternalIp string      `json:"externalIp"`
	Version    string      `json:"version"`
	State      State       `json:"state,omitempty"`
	Fqdn       interface{} `json:"fqdn"`
}

type Nsx struct {
	InternalIp string `json:"internalIp"`
	// Deprecated
	ExternalIp string      `json:"externalIp"`
	Version    string      `json:"version"`
	State      State       `json:"state,omitempty"`
	Fqdn       interface{} `json:"fqdn"`
}

type Vcenter struct {
	InternalIp string `json:"internalIp"`
	// Deprecated
	ExternalIp string      `json:"externalIp"`
	Version    string      `json:"version"`
	State      State       `json:"state,omitempty"`
	Fqdn       interface{} `json:"fqdn"`
}

type PrivateCloud struct {
	Name              string            `json:"name,omitempty"`
	CreateTime        string            `json:"createTime,omitempty"`
	UpdateTime        string            `json:"updateTime,omitempty"`
	DeleteTime        string            `json:"deleteTime,omitempty"`
	ExpireTime        string            `json:"expireTime,omitempty"`
	State             State             `json:"state,omitempty"`
	NetworkConfig     NetworkConfig     `json:"networkConfig"`
	ManagementCluster ManagementCluster `json:"managementCluster"`
	Description       string            `json:"description,omitempty"`
	Hcx               Hcx               `json:"hcx,omitempty"`
	Nsx               Nsx               `json:"nsx,omitempty"`
	Vcenter           Vcenter           `json:"vcenter,omitempty"`
	UID               string            `json:"uid,omitempty"`
}

type HasError interface {
	GetError() *Error
}

type Operation struct {
	Name     string         `json:"name,omitempty"`
	Done     bool           `json:"done,omitempty"`
	Metadata map[string]any `json:"metadata,omitempty"`
	Response map[string]any `json:"response,omitempty"`
	Error    *Error         `json:"error,omitempty"`
}

func (e *Operation) GetError() *Error {
	return e.Error
}

type Error struct {
	Code    int              `json:"code"`
	Message string           `json:"message"`
	Status  string           `json:"status"`
	Details []map[string]any `json:"details"`
}

//type Result struct {
//	Error     *Error     `json:"error,omitempty"`
//	Operation *Operation `json:"operation,omitempty"`
//}

//func (r *Result) UnmarshalJSON(data []byte) error {
//	return nil
//}
//
//func (a *Result) MarshalJSON() ([]byte, error) {
//	return nil, nil
//}
