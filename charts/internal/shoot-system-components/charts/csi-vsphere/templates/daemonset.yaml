kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: vsphere-csi-node
  namespace: kube-system
  labels:
    node.gardener.cloud/critical-component: "true"
spec:
  selector:
    matchLabels:
      app: vsphere-csi-node
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      annotations:
        node.gardener.cloud/wait-for-csi-node-vsphere: csi.vsphere.vmware.com
        checksum/secret-csi-vsphere-config: {{ include (print $.Template.BasePath "/secret-csi-vsphere-config.yaml") . | sha256sum }}
      labels:
        node.gardener.cloud/critical-component: "true"
        app: vsphere-csi-node
        role: vsphere-csi
    spec:
      hostNetwork: true
      dnsPolicy: Default
      priorityClassName: system-node-critical
      serviceAccount: csi-driver-node
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: node-driver-registrar
        image: {{ index .Values.images "csi-node-driver-registrar" }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "rm -rf /registration/csi.vsphere.vmware.com-reg.sock /csi/csi.sock /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com-reg.sock"]
        args:
        - "--v=5"
        - "--csi-address=/csi/csi.sock"
        - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
        env:
        - name: DRIVER_REG_SOCK_PATH
          value: /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com/csi.sock
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: vsphere-csi-node
        image: {{ index .Values.images "vsphere-csi-driver-node" }}
        args:
        - "--fss-name=internal-feature-states.csi.vsphere.vmware.com"
        - "--fss-namespace=$(CSI_NAMESPACE)"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: MAX_VOLUMES_PER_NODE
          value: "59" # Maximum number of volumes that controller can publish to the node. If value is not set or zero Kubernetes decide how many volumes can be published by the controller to the node.
        - name: X_CSI_MODE
          value: "node"
        - name: X_CSI_SPEC_REQ_VALIDATION
          value: "false"
        - name: X_CSI_SPEC_DISABLE_LEN_CHECK
          value: "true"
        - name: NODEGETINFO_WATCH_TIMEOUT_MINUTES
          value: "1"
{{- if .Values.topologyAware }}
        # needed only for topology aware setups
        - name: VSPHERE_CSI_CONFIG
          value: "/etc/cloud/csi-vsphere.conf" # here csi-vsphere.conf is the name of the file used for creating secret using "--from-file" flag
{{- end }}
        - name: LOGGER_LEVEL
          value: "PRODUCTION" # Options: DEVELOPMENT, PRODUCTION
        - name: CSI_NAMESPACE
          value: kube-system
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.kubernetesServiceHost }}
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        volumeMounts:
          - name: vsphere-config-volume
            mountPath: /etc/cloud
            readOnly: true
          - name: plugin-dir
            mountPath: /csi
          - name: pods-mount-dir
            mountPath: /var/lib/kubelet
            # needed so that any mounts setup inside this container are
            # propagated back to the host machine.
            mountPropagation: "Bidirectional"
          - name: device-dir
            mountPath: /dev
          - name: blocks-dir
            mountPath: /sys/block
          - name: sys-devices-dir
            mountPath: /sys/devices
        ports:
          - name: healthz
            containerPort: 9808
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: healthz
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 5
          failureThreshold: 3
      - name: liveness-probe
        image: {{ index .Values.images "liveness-probe" }}
        args:
          - "--csi-address=/csi/csi.sock"
        volumeMounts:
          - name: plugin-dir
            mountPath: /csi
      volumes:
        - name: vsphere-config-volume
          secret:
            secretName: csi-vsphere-config
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: blocks-dir
          hostPath:
            path: /sys/block
            type: Directory
        - name: sys-devices-dir
          hostPath:
            path: /sys/devices
            type: Directory
